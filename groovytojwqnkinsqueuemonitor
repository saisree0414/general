// Script to search for Queue items and perform actions if they are waiting for more than 4 days.


import jenkins.*;
import jenkins.model.*;
import hudson.*;
import hudson.model.*;

import java.text.DateFormat
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.net.URLEncoder;

def cal = Calendar.instance
Date todayDate = cal.getTime()

String todayStr
DateFormat todayStrFormat = new SimpleDateFormat("MM-dd-yyyy")
todayStr = todayStrFormat.format(cal.getTime()).toString()

//Function to write to Workspace
def writeToWorkspace(Object build, String toWrite, String fileName) {
  if(build.workspace.isRemote())
  {
    channel = build.workspace.channel;
    fp = new FilePath(channel, build.workspace.toString() + "/"+filename)
    } else {
    fp = new FilePath(new File(build.workspace.toString() + "/"+filename))
    }
  
  if(fp != null)
  {
    fp.write(toWrite, null); //writing to file
    }
}

def SRV_USERNAME = build.getEnvironment(listener).get('SRV_USERNAME')
def SRV_PASSWORD = build.getEnvironment(listener).get('SRV_PASSWORD')

//Function to perform Jenkins Queue Actions
def JenkinsActions(SRV_USERNAME,SRV_PASSWORD,QueueId,QueueJobAbsUrl,QueueReason) {
  
  //Cancel Queue
    QueueCancel = Jenkins.instance.getQueue().doCancelItem(QueueId)
  
  //Modify Description of job
      
   urlextn = 'description?description='
  Description = """<p style="background-color: yellow;font-size:14pt;color:red">Job Disabled (and/or) Queue has been cleared because build is waiting in Queue for more than 4 days due to: ${QueueReason}. Please check <a href="https://itec-confluence.---.com/display/AP107712/Automatically+Killing+Long-Time+Queued+Jobs">LongQueueJobs</a> for using generic slave label and for other details. Please contact releng.---.com for any questions.</p>"""
   DescriptionEncode = java.net.URLEncoder.encode(Description, "UTF-8")
   DescriptionSeturl =  QueueJobAbsUrl+urlextn+DescriptionEncode
   "curl -X POST -u ${SRV_USERNAME}:${SRV_PASSWORD} ${DescriptionSeturl}".execute()
  
    // Disable Job
  Disableurl = QueueJobAbsUrl+'disable'
  "curl -X POST -u ${SRV_USERNAME}:${SRV_PASSWORD} ${Disableurl}".execute()
  
}



def Queue = Jenkins.instance.getQueue()

QueueItems = Queue.getItems()


tempStr = new StringBuffer()

for (Items in QueueItems) {
  try{
  
  QueueId = Items.getId()
  String QueueReason = Items.getWhy()
    
  QueueUnixTime = Items.getInQueueSince()
  QueueTime = new Date( QueueUnixTime )
  
  TimeDiff = (todayDate - QueueTime)
  
  
 if (TimeDiff >= 1) { //1day 
  
  QueueTask = Items.task
  QueueJobUrl = QueueTask.getUrl()
  QueueJobName = QueueTask.getFullDisplayName()
  
  // Getting Job Absolute Path (below process is to detach Build # from workflow step and get groovy parsable Job Path
  QueueJobNameLength = QueueJobName.length()
  QueueIndexParse = QueueJobName.indexOf('#')
  if (QueueIndexParse > 0){ //This is for pipeline jobs
    QueueJobBuildno = QueueJobName[(QueueIndexParse+1)..(QueueJobNameLength-1)]
     
    QueueJobPath2 = QueueJobUrl.length() - ((QueueJobBuildno)+('/')).length()
    QueueJobAbsPath = QueueJobUrl[0..(QueueJobPath2-1)]
    
    QueueJobAbsUrl = 'https://itec-jenkins.---.com/cm301/'+QueueJobAbsPath

    
     } else{ //This is for regular jobs
       QueueJobAbsUrl = 'https://itec-jenkins.---.com/cm301/'+QueueJobUrl
     }
                      
   
    if (QueueReason == null){
        
      
    JenkinsActions(SRV_USERNAME,SRV_PASSWORD,QueueId,QueueJobAbsUrl,QueueReason)
     
     tempStr.append("\n")
     tempStr.append("Job Disabled/Queue Cancelled:" +  QueueJobAbsUrl )
     tempStr.append("\n")
     tempStr.append("Queue Reason:" + QueueReason )
     tempStr.append("\n")
     tempStr.append("##################################")
     toWrite = tempStr.toString()
     filename = 'CM301-QueueReport-'+todayStr+'.txt'
     writeToWorkspace(build, toWrite, filename)

    
    }else if((QueueReason != null)&&(QueueReason.contains('is already in progress') == false)){
        
      JenkinsActions(SRV_USERNAME,SRV_PASSWORD,QueueId,QueueJobAbsUrl,QueueReason)
      
     tempStr.append("\n") 
     tempStr.append("Job Disabled/Queue Cancelled:" +  QueueJobAbsUrl)
     tempStr.append("\n")
     tempStr.append("Queue Reason:" + QueueReason )
     tempStr.append("\n")
     tempStr.append("##################################")
     toWrite = tempStr.toString()
     filename = 'CM301-QueueReport-'+todayStr+'.txt'
     writeToWorkspace(build, toWrite, filename)

    
    }else {
      println "Queue Reason is different"
      println QueueReason
    }
    
  } else {
    println "Queue wait time is less than 1 day"
  }
 }catch(Exception e){
  println("\n Exception in executing Queue Module")
  println(e)
  }
}




==============================================shellscrit in postbuild step====================================

present=$(date +%m-%d-%Y)
cd ${WORKSPACE}
if [ -f CM301-QueueReport-${present}.txt ]
then
	
	echo "Queue Report Available"
	cat CM301-QueueReport-${present}.txt >> ${WORKSPACE}/CM301QueueReport/CM301-QueueReport-${present}.txt
	cd ${WORKSPACE}/CM301QueueReport
    
	
	git add CM301-QueueReport-${present}.txt
	git commit -m "cm301 Queue Report $present "
	git push origin total-queue

else
	echo "no builds waiting in Queue for more than 1 day"
fi
