def setBuildVersion(version, branch){
    def versionPattern = "${version}.${env.BUILD_NUMBER}"
    def timestamp = new Date().format("yyyyMMdd.HHmmss")
    def bareBranch = branch.replace("refs/remotes/origin/", "").replace("origin/", "").replace("*/", "")
    def isReleaseBranch = (bareBranch == "develop" || bareBranch == "main" || bareBranch == "master" 
                            || bareBranch.startsWith("release/"))
    def isTag = branch.startsWith("refs/tags/")

    if (isReleaseBranch) {
        return versionPattern
    }
    if (isTag) {
        return versionPattern
    }
    println("[INFO] Append timestamp to non develop/release branch")
    return "${versionPattern}-${timestamp}"                                                                                                           
}

// Similar to setBuildVersion but uses a '+' as a separater to better align with SemVer spec: https://semver.org/#spec-item-10
def setSemVerBuildVersion(version, branch){
    def versionPattern = "${version}+${env.BUILD_NUMBER}"
    def timestamp = new Date().format("yyyyMMdd.HHmmss")
    def bareBranch = branch.replace("refs/remotes/origin/", "").replace("origin/", "").replace("*/", "")
    def isReleaseBranch = (bareBranch == "develop" || bareBranch == "main" || bareBranch == "master" 
                            || bareBranch.startsWith("release/"))
    def isTag = branch.startsWith("refs/tags/")

    if (isReleaseBranch) {
        return versionPattern
    }
    if (isTag) {
        return versionPattern
    }
    println("[INFO] Append timestamp to non develop/release branch")
    return "${versionPattern}-${timestamp}"                                                                                                           
}


// require environment variable: env.ARTIFACTORY_CREDENTIALS_ID
def validateArtifact(repo, itemPath) {
    def artifactName = "${repo}/${itemPath}" 
    def artifactUrl = "https://artifactory.---.com/api/storage/${artifactName}"
    
    println("[INFO] Validating whether artifact exists in Artiactory")
    resp = httpRequest (
            authentication: "${env.ARTIFACTORY_CREDENTIALS_ID}", 
            consoleLogResponseBody: false,
            contentType: 'APPLICATION_JSON', 
            httpMode: 'GET',
            validResponseCodes: '100:399,404',
            ignoreSslErrors: true, 
            responseHandle: 'NONE',
            timeout: 60,
            url: artifactUrl
        )
    if (resp.status == 200) {
        error("Artifact ${artifactName} already exists. Stop publish step to avoid overwriting")
    }
}

// require environment variable: env.ARTIFACTORY_CREDENTIALS_ID
def setArtifactoryProperties(repo, itemPath, properties) {
    def artifactName = "${repo}/${itemPath}" 
    def artifactUrl = "https://artifactory.---.com/api/storage/${artifactName}?properties=${properties}&recursive=1"
    
    println("[INFO] Setting property in Artiactory")
    resp = httpRequest (
            authentication: "${env.ARTIFACTORY_CREDENTIALS_ID}", 
            consoleLogResponseBody: false,
            contentType: 'APPLICATION_JSON', 
            httpMode: 'PUT',
            validResponseCodes: '100:399,404',
            ignoreSslErrors: true, 
            responseHandle: 'NONE',
            timeout: 60,
            url: artifactUrl
        )
    if (resp.status != 204) {
        error("[ERROR] Failure in Setting Artifactory Properties")
    }
}

/* This function is to create zip package for PWI UDeploy database projects.
   This will compare master branch with other branches (develop/release/preprod) and create package if there are any differences found.
   Require : env.APP_NAME
   Require : env.GIT_BUILD_MASTER_BRANCH = master
   Require : env.GIT_BUILD_BRANCH = develop or release or preprod
*/
def createPWIDBZip() {
    def createZip = sh(returnStatus: true, script: """
                    cd ${WORKSPACE}
                    rm -f -r -d ${env.APP_NAME}
                    rm -f -r -d ${env.APP_NAME}_bkp

                    mkdir ${env.APP_NAME}
                    mkdir ${env.APP_NAME}_bkp
                    if [ `diff -rq --exclude=*git*  ${env.GIT_BUILD_MASTER_BRANCH} ${env.GIT_BUILD_BRANCH} | wc -l` -gt '0' ]
                    then
                        echo "[INFO] Diff more than 0. Creating zip package."
	                    rsync -acnC --exclude 're' --out-format='%n' ${env.GIT_BUILD_BRANCH}/ ${env.GIT_BUILD_MASTER_BRANCH}/ |grep -vP '/\$' |xargs -I{} rsync -R ${env.GIT_BUILD_BRANCH}/./{} ${env.APP_NAME}/
	                    rsync -rcnC --exclude 're' --out-format='%n' ${env.GIT_BUILD_MASTER_BRANCH}/ ${env.GIT_BUILD_BRANCH}/ |grep -vP '/\$' |xargs -I{} rsync -R --ignore-missing-args ${env.GIT_BUILD_MASTER_BRANCH}/./{} ${env.APP_NAME}_bkp/
                        zip -rT ${env.ARTIFACTORY_UPLOAD_PATTERN} ${env.APP_NAME}/ ${env.APP_NAME}_bkp/
                        exit 0
                    else
	                    echo "[INFO] Diff NOT more than 0. NOT Creating zip package."
                        exit 1
                    fi
                """)
    return createZip
}

def getEmailTemplate() {
    def borderColor = (currentBuild.currentResult == "SUCCESS") ? "lightgreen" : "red"
    def template = """
        <table style="border: ${borderColor} 3px solid; width: 600px">
            <tr align="center">
                <td>
                    <table style="margin: auto; width: 80%">
                        <tr>
                            <td>Status</td>
                            <td>${currentBuild.currentResult}</td>
                        </tr>
                        <tr>
                            <td>BuildUrl</td>
                            <td><a href="${env.BUILD_URL}">${env.JOB_BASE_NAME}/${env.BUILD_NUMBER}</a></td>
                        </tr>
                        <tr>
                            <td>JobUrl</td>
                            <td><a href="${env.JOB_URL}">${env.JOB_BASE_NAME}</a></td>
                        </tr>
                    </table>
                </td>
            </tr>
            <tr align="center">
                <td>
                    <table style="margin: auto; width: 100%;">
                        <tr>
                            <td align="left"><a href="https://jira.---.com/secure/CreateIssue.jspa?pid=36598&issuetype=6">Create
                                    Jira ticket</a></td>
                            <td align="center"><a href="https://confluence.---.com/x/C0T1DQ">EI RelEng Pipeline Offering</a>
                            </td>
                            <td align="right"><a
                                    href="mailto:EIRELENG@---.com?subject=Pipeline Offering Queries:">Contact Release
                                    Engineering</a></td>
                        </tr>
                    </table>
                </td>
            </tr>
        </table>
    """
    return template
}

return this


// Print text in Red for better visibility.
def redText(String text) {
    println()
    println("\033[1;31m$text\033[0m")
    println()
}

// Print text in Blue for better visibility.
def blueText(String text) {
    println()
    println("\033[1;34m[INFO] ${text}\033[0m")
    println()
}
