import argparse
import json
import os
import re
import sys

import requests
from requests.auth import HTTPBasicAuth


STASH_API = "https://stash.---.com/rest/api/1.0"
STASH_WEBHOOK_KEY = "com.nerdwin15.stash-stash-webhook-jenkins:jenkinsPostReceiveHook"
# Jenkins Endpoints
GIT_NOTIFIER = "com.nerdwin15.stash.webhook.notifier.GitPluginNotifier"
BITBUCKET_NOTIFIER = "com.nerdwin15.stash.webhook.notifier.BitbucketSourceNotifier"
username = os.environ.get("USERNAME")
password = os.environ.get("PASSWORD")


def main():
    validate_credentials(username, password)

    parser = argparse.ArgumentParser(
        prog="enable_webhook.py", description="Enable Stash webhook")
    parser.add_argument("-p", "--project", required=True,
                        dest="project", help="Stash project key")
    parser.add_argument("-r", "--repo", required=True,
                        dest="repo", help="Stash repo slug")
    parser.add_argument("-j", "--jenkins", required=True,
                        dest="jenkins_base", help="Jenkins client master url")
    parser.add_argument("-e", "--endpoint", required=True,
                        dest="jenkins_endpoint", help="Jenkins endpoint type ('GitPlugin' or 'BitbucketSourcePlugin')")
    parser.add_argument("-o", "--option", required=False,
                        dest="branch_option", help="branch option ('BuildAll', 'BuildFrom', or 'IgnoreFrom')")
    parser.add_argument("-b", "--branch", required=False,
                        dest="branch_pattern", help="branch pattern")
    args = parser.parse_args(sys.argv[1:])

    payload_json = {
        "jenkinsBase": validate_jenkins_base(args.jenkins_base),
        "jenkinsEndPointType": validate_endpoint(args.jenkins_endpoint),
        "cloneType": "ssh",
        "ignoreCerts": True,
        "ignoreCommitters": "",
        "ignoreAccessKeys": "",
        "branchOptions": validate_branch_option(args.branch_option),
        "branchOptionsBranches": args.branch_pattern,
        "disabledEvents": "",
        "urlParameters": "",
    }

    payload = json.dumps(payload_json)
    enable_webhook(args.project, args.repo, payload)


def validate_credentials(username, password):
    if username == None or password == None:
        raise ValueError("a username or password was not set")


def validate_jenkins_base(url):
    #Matches the base url and cm number
    result = re.search(r'https:\/\/itec-jenkins.---.com\/cm\d{3}', url)
    if result is None:
        raise ValueError(
            "The value you entered is not a valid client master url")
    match = re.search(r'https:\/\/itec-jenkins.---.com\/cm\d{3}', url)[0]
    return match


def validate_endpoint(name):
    if name == "GitPlugin":
        return GIT_NOTIFIER
    if name == "BitbucketSourcePlugin":
        return BITBUCKET_NOTIFIER
    raise ValueError(
        "-e/--endpoint value is not 'GitPlugin' or 'BitbucketSourcePlugin'")


def validate_branch_option(name):
    if name == "BuildAll":
        return '""'
    if name == "BuildFrom":
        return "whitelist"
    if name == "IgnoreFrom":
        return "blacklist"
    raise ValueError(
        "-o/--branch options value is not 'BuildAll', 'BuildFrom', or 'IgnoreFrom'")


def enable_webhook(project_key, repo_slug, payload):
    headers = {
        "Content-Type": "application/json",
    }
    url = "{}/projects/{}/repos/{}/settings/hooks/{}/enabled".format(
        STASH_API, project_key, repo_slug, STASH_WEBHOOK_KEY)

    response = requests.put(url, data=payload, auth=HTTPBasicAuth(
        username, password), headers=headers)

    settings_url = "{}/projects/{}/repos/{}/settings/hooks/{}/settings".format(
        STASH_API, project_key, repo_slug, STASH_WEBHOOK_KEY)
    repo_settings = requests.get(settings_url, auth=HTTPBasicAuth(
        username, password), headers=headers)

    if response.status_code == 200:
        print('200 OK. Request Successful')
        print(repo_settings.text)
    else:
        raise Exception("An error has occurred with your request")


if __name__ == "__main__":
    main()
