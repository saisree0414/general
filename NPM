###########Jenkins_Dockerfile###########
#Use node version required for your application
FROM fcr.---.com/node:10
 
ENV http_proxy http://http.proxy.---.com:8000
ENV https_proxy 
ENV no_proxy .---.com
 
# Install JDK8 for Sonar analysis
RUN \
apt-get update && \
apt-get install -y openjdk-8-jdk
 
# Set EDT Time Zone
RUN echo America/New_York | tee /etc/timezone && dpkg-reconfigure --frontend noninteractive tzdata
 
CMD [ "node" ]


--------------------------------------------------------------------------------------------------------------
#######################JENKINSFILE##########################


 

JENKINS_USER = "srvpwiredev"
JENKINS_NODE_LABEL = ""
 
pipeline {
    agent {
        label "${JENKINS_NODE_LABEL}"
    }
    stages {
        stage("Setup Pipeline Env") {
            steps {
                script {
                    // Email build result to the following CC list, semicolon separate
                    // example: EMAIL_CC_LIST = "sai@gmail.com"
                    env.EMAIL_CC_LIST = " "
                    env.APP_ID = "APPPPPPP"
                    env.APP_NAME = "dummy-npm"
                     
                    // Source Code
                    env.GIT_SSH_CLONE_URL = "ssh://git@itec-stash.---.com/APPPPPPP/APPPPPPP-node-example.git"
                    env.GIT_BUILD_BRANCH = "develop"
 
                    // Build Version
                    env.MAJOR_MINOR_VERSION = "1.303"
                    env.BUILD_VERSION = utility.setBuildVersion(env.MAJOR_MINOR_VERSION, env.GIT_BUILD_BRANCH)
 
                    // Execute NPM compile
                    env.PACKAGEJSON_PATH = "npm-example" // Specify folder path where package.json exists
                     
                    // Execute Sonar for code quality and quality gate analysis
                    env.EXECUTE_SONAR = "true"
                    env.EXECUTE_SONAR_QUALITY_GATE = "true"
                    env.SONARQUBE_ENV_NAME = "sonar_prod_with_token"
                    env.SONAR_SCANNER = tool "SonarRunner2.8"
 
                    //Execute NPM Publish
                    env.EXECUTE_NPM_PUBLISH = "true"
                     
                    // Execute Git tagging       
                    env.EXECUTE_GIT_TAGGING = "true"
                    env.GIT_TAG_NAME = "${env.BUILD_VERSION}"
 
                    /* Execute Veracode for code security scan
                       Check https://confluence.---.com/x/6hReDw for more details on Veracode Scan*/
                    env.EXECUTE_VERACODE_SCAN = "false"
                    env.VERACODE_APPLICATION_NAME = "WIY eire-build-automation APPPPPPP"
                    env.VERACODE_SANDBOX_NAME = "Release Assessment Sandbox"
                    env.VERACODE_SCAN_NAME = "APPPPPPP Static Scan ${env.BUILD_VERSION}"
                    env.VERACODE_CRITICALITY = "Medium"
                    env.VERACODE_ZIP_FILE_NAME = "eire-build-automation-${env.BUILD_VERSION}.zip"
                    env.VERACODE_ZIP_FILE_COMMAND = "zip -r ${env.VERACODE_ZIP_FILE_NAME} ./services ./spec ./node_modules -x *node-sass* -x *phantomjs* -x *.spec.ts"
                    env.VERACODE_UPLOAD_INCLUDE_PATTERN = "${env.PACKAGEJSON_PATH}/${env.VERACODE_ZIP_FILE_NAME}"
                    env.VERACODE_UPLOAD_EXCLUDE_PATTERN = ""
                    env.VERACODE_SCAN_INCLUDE_PATTERN = ""
                    env.VERACODE_SCAN_EXCLUDE_PATTERN = "*nodemodule*,*node_module*,*.jar"
                      // Artifact and Image details in Artifactory to set veracode properties
                    env.VERACODE_NPM_ARTIFACTORY_REPOSITORY = "npm-prereleases-local"
                    env.VERACODE_NPM_ARTIFACT_PATH = "@----APPPPPPP/istanbul-code-coverage-example/-/@----APPPPPPP/istanbul-code-coverage-example-${env.BUILD_VERSION}.tgz"
 
                    /* Execute Automated Governance Gates
                       Check https://confluence.---.com/x/ZqioGw for more details on Governance Gates*/
                    env.EXECUTE_GOVERNANCE_GATE = "false"
                    env.GOVERNANCE_ESG_OAUTH_ENDPOINT = "esg-oauth2-internal.---.com/as/resourceOwner"
                    env.GOVERNANCE_ESG_OAUTH_CREDENTIALS_ID = "f-----------------"
                    env.GOVERNANCE_ENDPOINT = "pipeline.---.com/governance"
                    env.GOVERNANCE_ARTIFACTORY_REPOSITORY = "npm-prereleases-local"
                    env.GOVERNANCE_ARTIFACTORY_PATH = "@----APPPPPPP/istanbul-code-coverage-example/-/@----APPPPPPP/istanbul-code-coverage-example-${env.BUILD_VERSION}.tgz"
                    env.GOVERNANCE_APPLICATION_NUMBER = "APPPPPPP"
                    env.GOVERNANCE_CLOUD_TARGET = "AMAZON WEB SERVICES"
                      // Acceptable Values: AMAZON WEB SERVICES, FIDCLOUD, MICROSOFT AZURE, NATIVE HYBRID CLOUD, ----- STRATUS CLOUD CONTAINER PLATFORM (SCCP), ----- ON-PREMISE
                    env.GOVERNANCE_FAIL_ON_NON_COMPLIANT = "true"
 
                    currentBuild.displayName = "${env.BUILD_VERSION}"
                    currentBuild.description = "${env.GIT_BUILD_BRANCH}"
                    // Set Client Master Default envrionment variables
                    setClientMasterDefaultVariableInEnv()
                }
            }
        }
 
        stage("Checkout Source Code") {
            steps {
                deleteDir()
                script {
                    def scmVars = checkout (
                        changelog: true, poll: true,
                        scm: [
                            $class: 'GitSCM',
                            branches: [[name: "${env.GIT_BUILD_BRANCH}"]],
                            doGenerateSubmoduleConfigurations: false, gitTool: 'Default', submoduleCfg: [],
                            userRemoteConfigs: [[credentialsId: "${env.GIT_CREDENTIAL_ID}", url: "${env.GIT_SSH_CLONE_URL}"]]
                        ]
                    )
                    env.CAPTURE_GIT_SHA = scmVars.GIT_COMMIT
                    echo "${env.CAPTURE_GIT_SHA}"
                }
            }
        }
     
        stage("NPM Build") {
            agent {
                dockerfile {
                    filename "Jenkins_Dockerfile"
                    dir "./ci"
                    args  "-v /home/${JENKINS_USER}:/home/${JENKINS_USER} -v /etc/passwd:/etc/passwd -v /bld/${JENKINS_USER}:/bld/${JENKINS_USER}"
                    reuseNode true
                }
            }
            steps {
                configFileProvider([configFile(fileId: env.NPMRC_CONFIG_ID, targetLocation: "${env.PACKAGEJSON_PATH}/.npmrc", variable: 'NPMRC')]) {
                    withCredentials([usernamePassword(credentialsId: env.NPMRC_AUTH_ID, passwordVariable: 'NPM_CONFIG__AUTH', usernameVariable: 'NPM_USER')]) {
                        sh("""
                            cd ${env.PACKAGEJSON_PATH}
                            npm version ${BUILD_VERSION}
                            npm install
                            npm run test-cover
                        """)      
                    }
                }
            }
        }
 
        stage("Sonar Scan") {
            agent {
                dockerfile {
                    filename "Jenkins_Dockerfile"
                    dir "./ci"
                    args  "-v /home/${JENKINS_USER}:/home/${JENKINS_USER} -v /etc/passwd:/etc/passwd -v /bld/${JENKINS_USER}:/bld/${JENKINS_USER} -v /bld/tools:/bld/tools"
                    reuseNode true
                }
            }
            when {
                expression {
                    EXECUTE_SONAR == "true"
                }
            }
            steps {
                withSonarQubeEnv(env.SONARQUBE_ENV_NAME) {
                    sh("""
                        cd ${env.PACKAGEJSON_PATH}
                        ${SONAR_SCANNER}/bin/sonar-scanner
                    """)
                }
            }
        }
 
        stage("Sonar Quality Gate") {
            when {
                expression {
                    EXECUTE_SONAR_QUALITY_GATE == "true"
                }
            }
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    script {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK' && qg.status != 'WARN') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
 
        stage("NPM Publish") {
            agent {
                dockerfile {
                    filename "Jenkins_Dockerfile"
                    dir "./ci"
                    args  "-v /home/${JENKINS_USER}:/home/${JENKINS_USER} -v /etc/passwd:/etc/passwd -v /bld/${JENKINS_USER}:/bld/${JENKINS_USER}"
                    reuseNode true
                }
            }
            when {
                expression {
                    EXECUTE_NPM_PUBLISH == "true"
                }
            }
            steps {
                configFileProvider([configFile(fileId: env.NPMRC_CONFIG_ID, targetLocation: "${env.PACKAGEJSON_PATH}/.npmrc", variable: 'NPMRC')]) {
                    withCredentials([usernamePassword(credentialsId: env.NPMRC_AUTH_ID, passwordVariable: 'NPM_CONFIG__AUTH', usernameVariable: 'NPM_USER')]) {
                        sh("""
                            cd ${env.PACKAGEJSON_PATH}
                            npm pack
                            npm publish
                        """)      
                    }
                }
            }
        }
 
        stage("Git Tagging") {
            when {
                expression {
                    EXECUTE_GIT_TAGGING == "true"
                }
            }
            steps {
                sh("""
                    git tag ${env.GIT_TAG_NAME}
                    git push origin ${env.GIT_TAG_NAME}
                """)
            }
        }
 
        stage("Veracode Static Scan") {
            agent {
                docker {
                    image "fcr.---.com/----APPPPPPP/veracodeapi:1.0"
                    args  "-v /home/${JENKINS_USER}:/home/${JENKINS_USER} -v /etc/passwd:/etc/passwd -v /bld/${JENKINS_USER}:/bld/${JENKINS_USER} --entrypoint=''"
                    reuseNode true
                }
            }
            when {
                expression {
                    EXECUTE_VERACODE_SCAN == "true"
                }
            }
            steps {
                sh("""
                    # create zip file to upload to Veracode
                    cd ${env.PACKAGEJSON_PATH}
                    ${env.VERACODE_ZIP_FILE_COMMAND}
                """)
                 
                withCredentials([usernamePassword(credentialsId: 'VeracodeGlobalUser',
                                passwordVariable: 'VERACODE_PASS', usernameVariable: 'VERACODE_USER')]) {
                    veracode (
                        useProxy: true, pHost: "http.proxy.---.com", pPort: "8000",
                        useIDkey: true, vuser:"", vpassword: "",
                        canFailJob: true, createSandbox: false,
                        copyRemoteFiles: true,
                        vkey: "${env.VERACODE_PASS}", vid:"${env.VERACODE_USER}",
                        criticality: "${env.VERACODE_CRITICALITY}", debug: true,
                        applicationName: "${env.VERACODE_APPLICATION_NAME}",
                        sandboxName: "${env.VERACODE_SANDBOX_NAME}",
                        scanName: "${env.VERACODE_SCAN_NAME}",
                        fileNamePattern: "",
                        replacementPattern: "",
                        uploadIncludesPattern: "${env.VERACODE_UPLOAD_INCLUDE_PATTERN}",
                        uploadExcludesPattern: "${env.VERACODE_UPLOAD_EXCLUDE_PATTERN}",
                        scanIncludesPattern: "${env.VERACODE_SCAN_INCLUDE_PATTERN}",
                        scanExcludesPattern: "${env.VERACODE_SCAN_EXCLUDE_PATTERN}"
                    )
                }
                script {
                    env.veracode_app_id = veracodeUtility.getAppId("${env.VERACODE_APPLICATION_NAME}")
                    env.veracode_sandbox_id = veracodeUtility.getSandboxId("${env.veracode_app_id}", "${env.VERACODE_SANDBOX_NAME}")
                    env.veracode_build_id = veracodeUtility.getBuildId("${env.veracode_app_id}", "${env.veracode_sandbox_id}", "${env.VERACODE_SCAN_NAME}")
                    env.VERACODE_PROPERTIES = "veracode_app_id=${env.veracode_app_id};veracode_sandbox_id=${env.veracode_sandbox_id};veracode_build_id=${env.veracode_build_id}"
 
                    if("${env.EXECUTE_NPM_PUBLISH}" == "true") {
                        SET_NPM_VERACODE_PROPERTY =  utility.setArtifactoryProperties("${env.VERACODE_NPM_ARTIFACTORY_REPOSITORY}", "${env.VERACODE_NPM_ARTIFACT_PATH}", "${env.VERACODE_PROPERTIES}")
                    }
                }
            }
        }
 
        stage("Automated Governance Gates") {
            agent {
                docker {
                    image "fcr.---.com/----ap119867/governance-python3:1.0.5"
                    args  "-v /home/${JENKINS_USER}:/home/${JENKINS_USER} -v /etc/passwd:/etc/passwd -v /bld/${JENKINS_USER}:/bld/${JENKINS_USER} --entrypoint=''"
                    reuseNode true
                }
            }
            when {
                expression {
                    EXECUTE_GOVERNANCE_GATE == "true"
                }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: env.GOVERNANCE_ESG_OAUTH_CREDENTIALS_ID, passwordVariable: 'ESG_PASSWORD', usernameVariable: 'ESG_USER')]) {
                    sh("""
                        python -m governance.governance \
                        --esg_oauth_endpoint '${env.GOVERNANCE_ESG_OAUTH_ENDPOINT}' \
                        --esg_oauth_username '${ESG_USER}' \
                        --esg_oauth_password '${ESG_PASSWORD}' \
                        --governance_endpoint '${env.GOVERNANCE_ENDPOINT}' \
                        --artifactory_repository '${env.GOVERNANCE_ARTIFACTORY_REPOSITORY}' \
                        --artifactory_path '${env.GOVERNANCE_ARTIFACTORY_PATH}' \
                        --application_number '${env.GOVERNANCE_APPLICATION_NUMBER}' \
                        --cloud_target '${env.GOVERNANCE_CLOUD_TARGET}' \
                        --fail_on_non_compliant '${env.GOVERNANCE_FAIL_ON_NON_COMPLIANT}'
                    """)
                }
            }
        }
    }
 
    post {
        always {
            script {
                currentBuild.result = currentBuild.result ?: 'SUCCESS'
                notifyBitbucket(commitSha1: "${env.CAPTURE_GIT_SHA}")
            }
            emailext (
                recipientProviders: [[$class: 'RequesterRecipientProvider']],
                subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_BASE_NAME}",
                to: "${env.EMAIL_CC_LIST}",
                mimeType: "text/html",
                body: utility.getEmailTemplate()
            )
        }
    }
}
